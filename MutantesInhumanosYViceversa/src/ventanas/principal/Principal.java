package ventanas.principal;

import conexion.ConexionServidor;
import ventanas.amigos.PanelAmigos;
import ventanas.amigos.PanelVerAmigo;
import ventanas.mensajes.PanelMensajes;
import ventanas.mensajes.PanelVerMensaje;
import mensajes.entidades.Mensaje;
import mensajes.entidades.Usuario;
import mensajes.MsjServConexion;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import ventanas.buscar.PanelBuscar;
import ventanas.perfil.PanelPerfil;
import ventanas.mensajes.PanelEnviarMensaje;
import ventanas.login.Login;
import utilidades.Constantes;
import ventanas.espera.DialogoEspera;

/**
 *
 * @author Flor
 */
public class Principal extends javax.swing.JFrame implements ActionListener {

    private Usuario usuario = null;

    //Paneles
    private PanelBuscar pBuscar = null;
    private PanelAmigos pAmigos = null;
    private PanelVerAmigo pVerAmigo = null;
    private PanelMensajes pMensajes = null;
    private PanelPerfil pPerfil = null;
    private PanelVerMensaje pVerMensaje = null;
    private PanelEnviarMensaje pEnviarMensaje = null;

    /**
     * Constructor
     *
     * @param usuario
     */
    public Principal(Usuario usuario) {
        initComponents();
        
        //Cargamos la informacion
        cargarDatos(usuario);

        //Inicializamos los paneles y eventos
        initPaneles();

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Se pide una confirmación antes de finalizar el programa
                int option;
                option = JOptionPane.showConfirmDialog(
                        (Component) e.getSource(),
                        "¿Estás seguro de que quieres cerrar la aplicación?",
                        "Salir",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) {
                    //Eliminamos la conexion
                    MsjServConexion mConexionEnvio = new MsjServConexion();
                    mConexionEnvio.setAccion(Constantes.ACCION_ELIMINAR_CONEXION);
                    mConexionEnvio.setIdUsuario(usuario.getIdUsuario());

                    //Envia la informacion al servidor
                    MsjServConexion mUsuarioRecibido = (MsjServConexion) ConexionServidor.envioObjetoServidor(mConexionEnvio);

                    if (null != mUsuarioRecibido) {
                    //No hace falta informar al usuario ya que es algo interno, pero si controlar que no se hizo para repetirlo
                    System.out.println("El servidor devuelve: " + mUsuarioRecibido.getCodError() + " Mensaje: " + mUsuarioRecibido.getMensaje());
                    } else {
                        System.out.println("El servidor no responde.");
                    }

                    //Cierra la ventana y sale de la aplicacion
                    System.exit(0);
                }
            }
        });
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource(Constantes.ICO_APP));

        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_buscar = new javax.swing.JButton();
        btn_amigos = new javax.swing.JButton();
        btn_mensajes = new javax.swing.JButton();
        btn_perfil = new javax.swing.JButton();
        jp_panel_contenedor = new javax.swing.JPanel();
        jp_panel_info = new javax.swing.JPanel();
        lbl_txt_total_user = new javax.swing.JLabel();
        lbl_total_user = new javax.swing.JLabel();
        lbl_txt_amigos_conect = new javax.swing.JLabel();
        lbl_amigos_conect = new javax.swing.JLabel();
        lbl_separador = new javax.swing.JLabel();
        lbl_total_amigos = new javax.swing.JLabel();
        lbl_fondo = new javax.swing.JLabel();
        mb_menu = new javax.swing.JMenuBar();
        m_opciones = new javax.swing.JMenu();
        mi_buscar = new javax.swing.JMenuItem();
        mi_amigos = new javax.swing.JMenuItem();
        mi_mensajes = new javax.swing.JMenuItem();
        mi_perfil = new javax.swing.JMenuItem();
        m_cerrar = new javax.swing.JMenu();
        m_salir = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Mutantes e Inhumanos y viceversa");
        setIconImage(getIconImage());
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_buscar.setBackground(new java.awt.Color(249, 246, 246));
        btn_buscar.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_buscar.png"))); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.setToolTipText("Buscar");
        btn_buscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 210, 100));

        btn_amigos.setBackground(new java.awt.Color(249, 246, 246));
        btn_amigos.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        btn_amigos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_amigos.png"))); // NOI18N
        btn_amigos.setText("Amigos");
        btn_amigos.setToolTipText("Amigos");
        btn_amigos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_amigos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_amigosActionPerformed(evt);
            }
        });
        getContentPane().add(btn_amigos, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 210, 100));

        btn_mensajes.setBackground(new java.awt.Color(249, 246, 246));
        btn_mensajes.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        btn_mensajes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_mensaje.png"))); // NOI18N
        btn_mensajes.setText("Mensajes");
        btn_mensajes.setToolTipText("Mensajes");
        btn_mensajes.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_mensajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mensajesActionPerformed(evt);
            }
        });
        getContentPane().add(btn_mensajes, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 210, 100));

        btn_perfil.setBackground(new java.awt.Color(249, 246, 246));
        btn_perfil.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        btn_perfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_perfil.png"))); // NOI18N
        btn_perfil.setText("Perfil");
        btn_perfil.setToolTipText("Perfil");
        btn_perfil.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_perfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_perfilActionPerformed(evt);
            }
        });
        getContentPane().add(btn_perfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, 210, 100));

        jp_panel_contenedor.setOpaque(false);
        jp_panel_contenedor.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jp_panel_contenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 970, 510));

        jp_panel_info.setBackground(new java.awt.Color(221, 167, 181));
        jp_panel_info.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(159, 106, 134), 2));

        lbl_txt_total_user.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        lbl_txt_total_user.setText("El total de usuarios que utilizan la aplicación son:");

        lbl_total_user.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        lbl_total_user.setText("0");

        lbl_txt_amigos_conect.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        lbl_txt_amigos_conect.setText("El total de amigos son:");

        lbl_amigos_conect.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        lbl_amigos_conect.setForeground(new java.awt.Color(102, 255, 51));
        lbl_amigos_conect.setText("0");

        lbl_separador.setFont(new java.awt.Font("Book Antiqua", 1, 16)); // NOI18N
        lbl_separador.setText(" /");

        lbl_total_amigos.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        lbl_total_amigos.setText("0");

        javax.swing.GroupLayout jp_panel_infoLayout = new javax.swing.GroupLayout(jp_panel_info);
        jp_panel_info.setLayout(jp_panel_infoLayout);
        jp_panel_infoLayout.setHorizontalGroup(
            jp_panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_panel_infoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_txt_total_user)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_total_user, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                .addComponent(lbl_txt_amigos_conect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_amigos_conect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_separador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_total_amigos)
                .addContainerGap())
        );
        jp_panel_infoLayout.setVerticalGroup(
            jp_panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_panel_infoLayout.createSequentialGroup()
                .addGap(0, 3, Short.MAX_VALUE)
                .addGroup(jp_panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_txt_total_user)
                    .addComponent(lbl_total_user)
                    .addComponent(lbl_txt_amigos_conect)
                    .addComponent(lbl_amigos_conect)
                    .addComponent(lbl_separador)
                    .addComponent(lbl_total_amigos)))
        );

        getContentPane().add(jp_panel_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 640, 1010, 30));

        lbl_fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/fondo_principal_nuevo1.jpg"))); // NOI18N
        lbl_fondo.setOpaque(true);
        getContentPane().add(lbl_fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, -90, 1040, 760));

        m_opciones.setText("Opciones");
        m_opciones.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N

        mi_buscar.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        mi_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_buscar_menu.png"))); // NOI18N
        mi_buscar.setText("Buscar");
        m_opciones.add(mi_buscar);

        mi_amigos.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        mi_amigos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_amigos_menu.png"))); // NOI18N
        mi_amigos.setText("Amigos");
        m_opciones.add(mi_amigos);

        mi_mensajes.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        mi_mensajes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_mensaje_menu.png"))); // NOI18N
        mi_mensajes.setText("Mensajes");
        m_opciones.add(mi_mensajes);

        mi_perfil.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        mi_perfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/ico/ico_perfil_menu.png"))); // NOI18N
        mi_perfil.setText("Perfil");
        m_opciones.add(mi_perfil);

        mb_menu.add(m_opciones);

        m_cerrar.setText("Cerrar sesión");
        m_cerrar.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        m_cerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m_cerrarMouseClicked(evt);
            }
        });
        mb_menu.add(m_cerrar);

        m_salir.setText("Salir");
        m_salir.setFont(new java.awt.Font("Book Antiqua", 1, 20)); // NOI18N
        m_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m_salirMouseClicked(evt);
            }
        });
        mb_menu.add(m_salir);

        setJMenuBar(mb_menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que inicializa el panel y eventos
     */
    private void initPaneles() {

        //Ocultamos el panel contenedor
        jp_panel_contenedor.setVisible(false);

        //Preparamos los eventos para las opciones de menu de cada uno de ellos
        mi_buscar.addActionListener(this);
        mi_amigos.addActionListener(this);
        mi_mensajes.addActionListener(this);
        mi_perfil.addActionListener(this);
    }

    /**
     * Metodo que carga la informacion
     *
     * @param usuario
     */
    private void cargarDatos(Usuario usuario) {

        this.usuario = usuario;

        //Insertamos la conexion para mostrar que esta en linea
        MsjServConexion mConexionEnvio = new MsjServConexion();
        mConexionEnvio.setAccion(Constantes.ACCION_CREAR_CONEXION);
        mConexionEnvio.setIdUsuario(usuario.getIdUsuario());

        //Envia la informacion al servidor
        MsjServConexion mUsuarioRecibido = (MsjServConexion) ConexionServidor.envioObjetoServidor(mConexionEnvio);

        if (null != mUsuarioRecibido) {
        //Segun el codigo devuelto por el servidor carga informacion o muestra un mensaje
        switch (mUsuarioRecibido.getCodError()) {
            case Constantes.OK:
                //No hace falta informar al usuario ya que es algo interno, pero si controlar que no se hizo para repetirlo
                System.out.println("El servidor devuelve: " + mUsuarioRecibido.getCodError() + " Mensaje: " + mUsuarioRecibido.getMensaje());

                lbl_total_user.setText(String.valueOf(mUsuarioRecibido.getTotalUsuarios()));
                lbl_amigos_conect.setText(String.valueOf(mUsuarioRecibido.getTotalAmigosConectados()));
                lbl_total_amigos.setText(String.valueOf(mUsuarioRecibido.getTotalAmigos()));
                break;
        }
        } else {
            System.out.println("El servidor no responde.");
        }
    }

    private void m_cerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_m_cerrarMouseClicked
        // Se pide una confirmación antes de cerrar la sesion
        int option;
        option = JOptionPane.showConfirmDialog(
                this,
                "¿Estás seguro de que quieres cerrar sesión?",
                "Cerrar sesión",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            //Eliminamos la conexion
            MsjServConexion mConexionEnvio = new MsjServConexion();
            mConexionEnvio.setAccion(Constantes.ACCION_ELIMINAR_CONEXION);
            mConexionEnvio.setIdUsuario(usuario.getIdUsuario());

            //Envia la informacion al servidor
            MsjServConexion mUsuarioRecibido = (MsjServConexion) ConexionServidor.envioObjetoServidor(mConexionEnvio);

            if (null != mUsuarioRecibido) {
            //No hace falta informar al usuario ya que es algo interno, pero si controlar que no se hizo para repetirlo
            System.out.println("El servidor devuelve: " + mUsuarioRecibido.getCodError() + " Mensaje: " + mUsuarioRecibido.getMensaje());
            } else {
                System.out.println("El servidor no responde.");
            }

            //Ocultamos la ventana actual
            this.setVisible(false);

            //Inicializamos la ventana de login y la mostramos
            Login login = new Login();
            login.setLocationRelativeTo(null);
            login.setVisible(true);
        }
    }//GEN-LAST:event_m_cerrarMouseClicked

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        //Ventana de dialogo de espera
        DialogoEspera wait = new DialogoEspera();

        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
        //Mostramos el panel para la busqueda
        mostrarPanelBusqueda();
                wait.close();
                return null;
            }
        };

        mySwingWorker.execute();
        wait.makeWait("Cargando", evt);
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_amigosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_amigosActionPerformed
        //Ventana de dialogo de espera
        DialogoEspera wait = new DialogoEspera();

        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
        //Mostramos el panel para los amigos
        mostrarPanelAmigos();
                wait.close();
                return null;
            }
        };

        mySwingWorker.execute();
        wait.makeWait("Cargando", evt);
    }//GEN-LAST:event_btn_amigosActionPerformed

    private void btn_mensajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mensajesActionPerformed
        //Ventana de dialogo de espera
        DialogoEspera wait = new DialogoEspera();

        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
        //Mostramos el panel para los mensajes
        mostrarPanelMensajes();
                wait.close();
                return null;
            }
        };

        mySwingWorker.execute();
        wait.makeWait("Cargando", evt);
    }//GEN-LAST:event_btn_mensajesActionPerformed

    private void btn_perfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_perfilActionPerformed
        //Ventana de dialogo de espera
        DialogoEspera wait = new DialogoEspera();

        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
        //Mostramos el panel para el perfil
        mostrarPanelPerfil();
                wait.close();
                return null;
            }
        };

        mySwingWorker.execute();
        wait.makeWait("Cargando", evt);
    }//GEN-LAST:event_btn_perfilActionPerformed

    private void m_salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_m_salirMouseClicked
        int option;
        option = JOptionPane.showConfirmDialog(
                this,
                "¿Estás seguro de que quieres cerrar la aplicación?",
                "Salir",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            //Eliminamos la conexion
            MsjServConexion mConexionEnvio = new MsjServConexion();
            mConexionEnvio.setAccion(Constantes.ACCION_ELIMINAR_CONEXION);
            mConexionEnvio.setIdUsuario(usuario.getIdUsuario());

            //Envia la informacion al servidor
            MsjServConexion mUsuarioRecibido = (MsjServConexion) ConexionServidor.envioObjetoServidor(mConexionEnvio);

            if (null != mUsuarioRecibido) {
            //No hace falta informar al usuario ya que es algo interno, pero si controlar que no se hizo para repetirlo
            System.out.println("El servidor devuelve: " + mUsuarioRecibido.getCodError() + " Mensaje: " + mUsuarioRecibido.getMensaje());
            } else {
                System.out.println("El servidor no responde.");
            }

            //Cierra la ventana y sale de la aplicacion
            System.exit(0);
        }
    }//GEN-LAST:event_m_salirMouseClicked

    /**
     * Metodo que implementa las acciones de cada ítem del menu
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == mi_buscar) {
            //Mostramos el panel para la busqueda
            mostrarPanelBusqueda();
        }
        if (e.getSource() == mi_amigos) {
            //Mostramos el panel para los amigos
            mostrarPanelAmigos();
        }
        if (e.getSource() == mi_mensajes) {
            //Mostramos el panel para los mensajes
            mostrarPanelMensajes();
        }
        if (e.getSource() == mi_perfil) {
            //Mostramos el panel para el perfil
            mostrarPanelPerfil();
        }
    }

    /**
     * Metodo que recibe la informacion de los amigos conectados
     *
     * @param amigosConectados
     * @param totalAmigos
     */
    public void infAmigosConectados(int amigosConectados, int totalAmigos) {
        lbl_amigos_conect.setText(String.valueOf(amigosConectados));
        lbl_total_amigos.setText(String.valueOf(totalAmigos));
    }

    /**
     * Metodo que muestra el panel para la busqueda
     */
    public void mostrarPanelBusqueda() {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pBuscar = new PanelBuscar(this);
        //Carga la informacion de nuevo para comprobar si hay nuevos amigos que buscar
        pBuscar.cargarDatos(usuario);
        jp_panel_contenedor.add(pBuscar);
        ocultarMostrarPanel(1);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para los amigos
     */
    public void mostrarPanelAmigos() {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pAmigos = new PanelAmigos(this);
        //Carga la informacion de nuevo para comprobar si hay nuevos amigos
        pAmigos.cargarDatos(usuario);
        jp_panel_contenedor.add(pAmigos);
        ocultarMostrarPanel(2);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para los mensajes
     */
    public void mostrarPanelMensajes() {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pMensajes = new PanelMensajes(this);
        //Carga la informacion de nuevo para comprobar si hay nuevos mensajes
        pMensajes.cargarDatos(usuario);
        jp_panel_contenedor.add(pMensajes);
        ocultarMostrarPanel(3);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para el perfil
     */
    private void mostrarPanelPerfil() {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pPerfil = new PanelPerfil(usuario);
        jp_panel_contenedor.add(pPerfil);
        ocultarMostrarPanel(4);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para ver el mensaje
     *
     * @param msj
     */
    public void mostrarPanelVerMensaje(Mensaje msj) {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pVerMensaje = new PanelVerMensaje(msj, this);
        jp_panel_contenedor.add(pVerMensaje);
        ocultarMostrarPanel(5);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para enviar el mensaje
     *
     * @param msj
     * @param tipo
     */
    public void mostrarPanelEnviarMensaje(Mensaje msj, int tipo) {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pEnviarMensaje = new PanelEnviarMensaje(msj, this, tipo);
        jp_panel_contenedor.add(pEnviarMensaje);
        ocultarMostrarPanel(6);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para enviar el mensaje
     *
     * @param tipo
     * @param usuario
     * @param conectado
     * @param idUsuario
     */
    public void mostrarPanelEnviarMensaje(int tipo, Usuario usuario, boolean conectado, int idUsuario) {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pEnviarMensaje = new PanelEnviarMensaje(this, tipo, usuario, conectado, idUsuario);
        jp_panel_contenedor.add(pEnviarMensaje);
        ocultarMostrarPanel(6);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que muestra el panel para ver el amigo
     *
     * @param usuario
     * @param conectado
     * @param idUsuario
     */
    public void mostrarPanelVerAmigo(Usuario usuario, boolean conectado, int idUsuario) {
        //Limpiamos de componentes el panel contenedor
        jp_panel_contenedor.removeAll();
        pVerAmigo = new PanelVerAmigo(usuario, conectado, idUsuario, this);
        jp_panel_contenedor.add(pVerAmigo);
        ocultarMostrarPanel(7);
        jp_panel_contenedor.validate();
    }

    /**
     * Metodo que oculta o muestra los paneles
     *
     * @param panel
     */
    private void ocultarMostrarPanel(int panel) {

        switch (panel) {

            case 1:
                //Buscar
                pBuscar.setVisible(true);
                pAmigos = null;
                pMensajes = null;
                pPerfil = null;
                pVerMensaje = null;
                pEnviarMensaje = null;
                pVerAmigo = null;
                break;
            case 2:
                //Amigos
                pBuscar = null;
                pAmigos.setVisible(true);
                pMensajes = null;
                pPerfil = null;
                pVerMensaje = null;
                pEnviarMensaje = null;
                pVerAmigo = null;
                break;
            case 3:
                //Mensajes
                pBuscar = null;
                pAmigos = null;
                pMensajes.setVisible(true);
                pPerfil = null;
                pVerMensaje = null;
                pEnviarMensaje = null;
                pVerAmigo = null;
                break;
            case 4:
                //Perfil
                pBuscar = null;
                pAmigos = null;
                pMensajes = null;
                pPerfil.setVisible(true);
                pVerMensaje = null;
                pEnviarMensaje = null;
                pVerAmigo = null;
                break;
            case 5:
                //VerMensaje
                pBuscar = null;
                pAmigos = null;
                pMensajes = null;
                pPerfil = null;
                pVerMensaje.setVisible(true);
                pEnviarMensaje = null;
                pVerAmigo = null;
                break;
            case 6:
                //EnviarMensaje
                pBuscar = null;
                pAmigos = null;
                pMensajes = null;
                pPerfil = null;
                pVerMensaje = null;
                pEnviarMensaje.setVisible(true);
                pVerAmigo = null;
                break;
            case 7:
                //VerAmigo
                pBuscar = null;
                pAmigos = null;
                pMensajes = null;
                pPerfil = null;
                pVerMensaje = null;
                pEnviarMensaje = null;
                pVerAmigo.setVisible(true);
                break;
        }

        //Mostramos el panel contenedor
        jp_panel_contenedor.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_amigos;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_mensajes;
    private javax.swing.JButton btn_perfil;
    private javax.swing.JPanel jp_panel_contenedor;
    private javax.swing.JPanel jp_panel_info;
    private javax.swing.JLabel lbl_amigos_conect;
    private javax.swing.JLabel lbl_fondo;
    private javax.swing.JLabel lbl_separador;
    private javax.swing.JLabel lbl_total_amigos;
    private javax.swing.JLabel lbl_total_user;
    private javax.swing.JLabel lbl_txt_amigos_conect;
    private javax.swing.JLabel lbl_txt_total_user;
    private javax.swing.JMenu m_cerrar;
    private javax.swing.JMenu m_opciones;
    private javax.swing.JMenu m_salir;
    private javax.swing.JMenuBar mb_menu;
    private javax.swing.JMenuItem mi_amigos;
    private javax.swing.JMenuItem mi_buscar;
    private javax.swing.JMenuItem mi_mensajes;
    private javax.swing.JMenuItem mi_perfil;
    // End of variables declaration//GEN-END:variables
}
